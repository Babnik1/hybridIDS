1. Назначение проекта:

HybridIDS — это система обнаружения вторжений, способная анализировать сетевой трафик в реальном времени, применяя как сигнатурный, так и эвристический анализ. Цель — обеспечить более надёжную защиту сетей за счёт комбинации статических правил и адаптивных механизмов.

2. Структура проекта:

hybridIDS/
├── CMakeLists.txt              # Конфигурация сборки через CMake
├── Dockerfile                  # Описание контейнера для сборки проекта
├── build.sh                    # Сценарий автоматической сборки и установки
├── conanfile.py                # Описание зависимостей для Conan
├── config/                     # Конфигурационные файлы
│   ├── config.json             # Основные параметры конфигурации
│   ├── rules.json              # Сигнатурные правила IDS
│   └── whitelist.txt           # Белый список разрешённых IP
├── include/                    # Заголовочные файлы
│   └── *.h                     # Интерфейсы модулей IDS
├── src/                        # Исходный код
│   └── *.cpp                   # Реализация логики IDS
├── tests/                      # Юнит-тесты
└── .vscode/                    # Конфигурация среды разработки

3. Сборка и установка
Использование Docker:

./build.sh

Сборка проекта происходит в Docker-контейнере. Так мы обеспечиваем изолированность, безопасность и одинаковые условия при сборке.
После окончания сборки, контейнер удаляется. Временные файлы, по пожеланию пользователя, тоже чистятся.

После сборки:

    Бинарник будет установлен в /opt/hybridids/bin

    Логи будут писаться в /opt/hybridids/logs

    Сервис можно запустить:

    sudo systemctl start hybridids.service

4. Зависимости

Устанавливаются через Conan:

    libpcap — перехват сетевых пакетов

    gtest — тестирование

    nlohmann_json — работа с JSON

5. Конфигурация

    config/config.json: общие параметры (интерфейс сети, таймаут логирования, чувствительность анализатора к количеству пакетов за определенное время)

    config/rules.json: сигнатуры

    config/whitelist.txt: исключения

6. Как работает

    main.cpp инициализирует захват трафика.

    sniffer.cpp обрабатывает пакеты.

    rule_engine.cpp применяет правила.

    heuristic_engine.cpp выявляет аномалии.

    nftables_control.cpp может блокировать трафик.

    logger.cpp сохраняет события в лог.

7. Тестирование

    Для проверки работоспособности реализовано покрытие всех функциональных компонентов IDS. Тестирование проходит при сборке с подробным описанием 
    количества и результатов тестов для каждого компонент. Это обеспечивают флаги в CMakeLists.txt и в build.sh.